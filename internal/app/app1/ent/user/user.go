// Code generated by entc, DO NOT EDIT.

package user

import (
	"github.com/pepeunlimited/users/internal/app/app1/ent/schema"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username vertex property in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email vertex property in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password vertex property in the database.
	FieldPassword = "password"
	// FieldIsDeleted holds the string denoting the is_deleted vertex property in the database.
	FieldIsDeleted = "is_deleted"
	// FieldIsBanned holds the string denoting the is_banned vertex property in the database.
	FieldIsBanned = "is_banned"
	// FieldIsLocked holds the string denoting the is_locked vertex property in the database.
	FieldIsLocked = "is_locked"
	// FieldLastModified holds the string denoting the last_modified vertex property in the database.
	FieldLastModified = "last_modified"

	// Table holds the table name of the user in the database.
	Table = "users"
	// TicketsTable is the table the holds the tickets relation/edge.
	TicketsTable = "tickets"
	// TicketsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	TicketsInverseTable = "tickets"
	// TicketsColumn is the table column denoting the tickets relation/edge.
	TicketsColumn = "users_id"
	// RolesTable is the table the holds the roles relation/edge.
	RolesTable = "roles"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "roles"
	// RolesColumn is the table column denoting the roles relation/edge.
	RolesColumn = "users_id"
)

// Columns holds all SQL columns are user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldEmail,
	FieldPassword,
	FieldIsDeleted,
	FieldIsBanned,
	FieldIsLocked,
	FieldLastModified,
}

var (
	fields = schema.User{}.Fields()

	// descUsername is the schema descriptor for username field.
	descUsername = fields[0].Descriptor()
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator = func() func(string) error {
		validators := descUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()

	// descEmail is the schema descriptor for email field.
	descEmail = fields[1].Descriptor()
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator = func() func(string) error {
		validators := descEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()

	// descPassword is the schema descriptor for password field.
	descPassword = fields[2].Descriptor()
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator = func() func(string) error {
		validators := descPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()

	// descIsDeleted is the schema descriptor for is_deleted field.
	descIsDeleted = fields[3].Descriptor()
	// DefaultIsDeleted holds the default value on creation for the is_deleted field.
	DefaultIsDeleted = descIsDeleted.Default.(bool)

	// descIsBanned is the schema descriptor for is_banned field.
	descIsBanned = fields[4].Descriptor()
	// DefaultIsBanned holds the default value on creation for the is_banned field.
	DefaultIsBanned = descIsBanned.Default.(bool)

	// descIsLocked is the schema descriptor for is_locked field.
	descIsLocked = fields[5].Descriptor()
	// DefaultIsLocked holds the default value on creation for the is_locked field.
	DefaultIsLocked = descIsLocked.Default.(bool)
)
