// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/users/internal/app/app1/ent/predicate"
	"github.com/pepeunlimited/users/internal/app/app1/ent/role"
	"github.com/pepeunlimited/users/internal/app/app1/ent/user"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	role         *string
	users        map[int]struct{}
	clearedUsers bool
	predicates   []predicate.Role
}

// Where adds a new predicate for the builder.
func (ru *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetRole sets the role field.
func (ru *RoleUpdate) SetRole(s string) *RoleUpdate {
	ru.role = &s
	return ru
}

// SetNillableRole sets the role field if the given value is not nil.
func (ru *RoleUpdate) SetNillableRole(s *string) *RoleUpdate {
	if s != nil {
		ru.SetRole(*s)
	}
	return ru
}

// SetUsersID sets the users edge to User by id.
func (ru *RoleUpdate) SetUsersID(id int) *RoleUpdate {
	if ru.users == nil {
		ru.users = make(map[int]struct{})
	}
	ru.users[id] = struct{}{}
	return ru
}

// SetNillableUsersID sets the users edge to User by id if the given value is not nil.
func (ru *RoleUpdate) SetNillableUsersID(id *int) *RoleUpdate {
	if id != nil {
		ru = ru.SetUsersID(*id)
	}
	return ru
}

// SetUsers sets the users edge to User.
func (ru *RoleUpdate) SetUsers(u *User) *RoleUpdate {
	return ru.SetUsersID(u.ID)
}

// ClearUsers clears the users edge to User.
func (ru *RoleUpdate) ClearUsers() *RoleUpdate {
	ru.clearedUsers = true
	return ru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RoleUpdate) Save(ctx context.Context) (int, error) {
	if ru.role != nil {
		if err := role.RoleValidator(*ru.role); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"role\": %v", err)
		}
	}
	if len(ru.users) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"users\"")
	}
	return ru.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: role.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := ru.role; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: role.FieldRole,
		})
	}
	if ru.clearedUsers {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: []string{role.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := ru.users; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: []string{role.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	id           int
	role         *string
	users        map[int]struct{}
	clearedUsers bool
}

// SetRole sets the role field.
func (ruo *RoleUpdateOne) SetRole(s string) *RoleUpdateOne {
	ruo.role = &s
	return ruo
}

// SetNillableRole sets the role field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableRole(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetRole(*s)
	}
	return ruo
}

// SetUsersID sets the users edge to User by id.
func (ruo *RoleUpdateOne) SetUsersID(id int) *RoleUpdateOne {
	if ruo.users == nil {
		ruo.users = make(map[int]struct{})
	}
	ruo.users[id] = struct{}{}
	return ruo
}

// SetNillableUsersID sets the users edge to User by id if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableUsersID(id *int) *RoleUpdateOne {
	if id != nil {
		ruo = ruo.SetUsersID(*id)
	}
	return ruo
}

// SetUsers sets the users edge to User.
func (ruo *RoleUpdateOne) SetUsers(u *User) *RoleUpdateOne {
	return ruo.SetUsersID(u.ID)
}

// ClearUsers clears the users edge to User.
func (ruo *RoleUpdateOne) ClearUsers() *RoleUpdateOne {
	ruo.clearedUsers = true
	return ruo
}

// Save executes the query and returns the updated entity.
func (ruo *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	if ruo.role != nil {
		if err := role.RoleValidator(*ruo.role); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"role\": %v", err)
		}
	}
	if len(ruo.users) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"users\"")
	}
	return ruo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RoleUpdateOne) sqlSave(ctx context.Context) (r *Role, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  ruo.id,
				Type:   field.TypeInt,
				Column: role.FieldID,
			},
		},
	}
	if value := ruo.role; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: role.FieldRole,
		})
	}
	if ruo.clearedUsers {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: []string{role.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := ruo.users; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: []string{role.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	r = &Role{config: ruo.config}
	spec.Assign = r.assignValues
	spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
