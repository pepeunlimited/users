// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/pepeunlimited/users/internal/pkg/ent/role"
	"github.com/pepeunlimited/users/internal/pkg/ent/user"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RoleCreate is the builder for creating a Role entity.
type RoleCreate struct {
	config
	role  *string
	users map[int]struct{}
}

// SetRole sets the role field.
func (rc *RoleCreate) SetRole(s string) *RoleCreate {
	rc.role = &s
	return rc
}

// SetNillableRole sets the role field if the given value is not nil.
func (rc *RoleCreate) SetNillableRole(s *string) *RoleCreate {
	if s != nil {
		rc.SetRole(*s)
	}
	return rc
}

// SetUsersID sets the users edge to User by id.
func (rc *RoleCreate) SetUsersID(id int) *RoleCreate {
	if rc.users == nil {
		rc.users = make(map[int]struct{})
	}
	rc.users[id] = struct{}{}
	return rc
}

// SetNillableUsersID sets the users edge to User by id if the given value is not nil.
func (rc *RoleCreate) SetNillableUsersID(id *int) *RoleCreate {
	if id != nil {
		rc = rc.SetUsersID(*id)
	}
	return rc
}

// SetUsers sets the users edge to User.
func (rc *RoleCreate) SetUsers(u *User) *RoleCreate {
	return rc.SetUsersID(u.ID)
}

// Save creates the Role in the database.
func (rc *RoleCreate) Save(ctx context.Context) (*Role, error) {
	if rc.role == nil {
		v := role.DefaultRole
		rc.role = &v
	}
	if err := role.RoleValidator(*rc.role); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"role\": %v", err)
	}
	if len(rc.users) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"users\"")
	}
	return rc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoleCreate) SaveX(ctx context.Context) *Role {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RoleCreate) sqlSave(ctx context.Context) (*Role, error) {
	var (
		r    = &Role{config: rc.config}
		spec = &sqlgraph.CreateSpec{
			Table: role.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: role.FieldID,
			},
		}
	)
	if value := rc.role; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: role.FieldRole,
		})
		r.Role = *value
	}
	if nodes := rc.users; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: []string{role.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges = append(spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, rc.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}
