// Code generated by entc, DO NOT EDIT.

package ticket

import (
	"github.com/pepeunlimited/users/internal/pkg/ent/schema"
)

const (
	// Label holds the string label denoting the ticket type in the database.
	Label = "ticket"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldToken holds the string denoting the token vertex property in the database.
	FieldToken = "token"
	// FieldCreatedAt holds the string denoting the created_at vertex property in the database.
	FieldCreatedAt = "created_at"
	// FieldExpiresAt holds the string denoting the expires_at vertex property in the database.
	FieldExpiresAt = "expires_at"

	// Table holds the table name of the ticket in the database.
	Table = "tickets"
	// UsersTable is the table the holds the users relation/edge.
	UsersTable = "tickets"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_tickets"
)

// Columns holds all SQL columns for ticket fields.
var Columns = []string{
	FieldID,
	FieldToken,
	FieldCreatedAt,
	FieldExpiresAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Ticket type.
var ForeignKeys = []string{
	"user_tickets",
}

var (
	fields = schema.Ticket{}.Fields()

	// descToken is the schema descriptor for token field.
	descToken = fields[0].Descriptor()
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator = func() func(string) error {
		validators := descToken.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(token string) error {
			for _, fn := range fns {
				if err := fn(token); err != nil {
					return err
				}
			}
			return nil
		}
	}()
)
