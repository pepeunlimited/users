// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/users/internal/app/app1/ent/role"
)

// RoleCreate is the builder for creating a Role entity.
type RoleCreate struct {
	config
	role  *string
	users map[int]struct{}
}

// SetRole sets the role field.
func (rc *RoleCreate) SetRole(s string) *RoleCreate {
	rc.role = &s
	return rc
}

// SetNillableRole sets the role field if the given value is not nil.
func (rc *RoleCreate) SetNillableRole(s *string) *RoleCreate {
	if s != nil {
		rc.SetRole(*s)
	}
	return rc
}

// SetUsersID sets the users edge to User by id.
func (rc *RoleCreate) SetUsersID(id int) *RoleCreate {
	if rc.users == nil {
		rc.users = make(map[int]struct{})
	}
	rc.users[id] = struct{}{}
	return rc
}

// SetNillableUsersID sets the users edge to User by id if the given value is not nil.
func (rc *RoleCreate) SetNillableUsersID(id *int) *RoleCreate {
	if id != nil {
		rc = rc.SetUsersID(*id)
	}
	return rc
}

// SetUsers sets the users edge to User.
func (rc *RoleCreate) SetUsers(u *User) *RoleCreate {
	return rc.SetUsersID(u.ID)
}

// Save creates the Role in the database.
func (rc *RoleCreate) Save(ctx context.Context) (*Role, error) {
	if rc.role == nil {
		v := role.DefaultRole
		rc.role = &v
	}
	if err := role.RoleValidator(*rc.role); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"role\": %v", err)
	}
	if len(rc.users) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"users\"")
	}
	return rc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoleCreate) SaveX(ctx context.Context) *Role {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RoleCreate) sqlSave(ctx context.Context) (*Role, error) {
	var (
		res     sql.Result
		builder = sql.Dialect(rc.driver.Dialect())
		r       = &Role{config: rc.config}
	)
	tx, err := rc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(role.Table).Default()
	if value := rc.role; value != nil {
		insert.Set(role.FieldRole, *value)
		r.Role = *value
	}

	id, err := insertLastID(ctx, tx, insert.Returning(role.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	r.ID = int(id)
	if len(rc.users) > 0 {
		for eid := range rc.users {
			query, args := builder.Update(role.UsersTable).
				Set(role.UsersColumn, eid).
				Where(sql.EQ(role.FieldID, id)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return r, nil
}
