// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// IsBanned holds the value of the "is_banned" field.
	IsBanned bool `json:"is_banned,omitempty"`
	// IsLocked holds the value of the "is_locked" field.
	IsLocked bool `json:"is_locked,omitempty"`
	// LastModified holds the value of the "last_modified" field.
	LastModified time.Time `json:"last_modified,omitempty"`
}

// FromRows scans the sql response data into User.
func (u *User) FromRows(rows *sql.Rows) error {
	var scanu struct {
		ID           int
		Username     sql.NullString
		Email        sql.NullString
		Password     sql.NullString
		IsDeleted    sql.NullBool
		IsBanned     sql.NullBool
		IsLocked     sql.NullBool
		LastModified sql.NullTime
	}
	// the order here should be the same as in the `user.Columns`.
	if err := rows.Scan(
		&scanu.ID,
		&scanu.Username,
		&scanu.Email,
		&scanu.Password,
		&scanu.IsDeleted,
		&scanu.IsBanned,
		&scanu.IsLocked,
		&scanu.LastModified,
	); err != nil {
		return err
	}
	u.ID = scanu.ID
	u.Username = scanu.Username.String
	u.Email = scanu.Email.String
	u.Password = scanu.Password.String
	u.IsDeleted = scanu.IsDeleted.Bool
	u.IsBanned = scanu.IsBanned.Bool
	u.IsLocked = scanu.IsLocked.Bool
	u.LastModified = scanu.LastModified.Time
	return nil
}

// QueryTickets queries the tickets edge of the User.
func (u *User) QueryTickets() *TicketQuery {
	return (&UserClient{u.config}).QueryTickets(u)
}

// QueryRoles queries the roles edge of the User.
func (u *User) QueryRoles() *RoleQuery {
	return (&UserClient{u.config}).QueryRoles(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", password=<sensitive>")
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", u.IsDeleted))
	builder.WriteString(", is_banned=")
	builder.WriteString(fmt.Sprintf("%v", u.IsBanned))
	builder.WriteString(", is_locked=")
	builder.WriteString(fmt.Sprintf("%v", u.IsLocked))
	builder.WriteString(", last_modified=")
	builder.WriteString(u.LastModified.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

// FromRows scans the sql response data into Users.
func (u *Users) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		scanu := &User{}
		if err := scanu.FromRows(rows); err != nil {
			return err
		}
		*u = append(*u, scanu)
	}
	return nil
}

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
