// Code generated by entc, DO NOT EDIT.

package role

import (
	"github.com/pepeunlimited/users/internal/app/app1/ent/schema"
)

const (
	// Label holds the string label denoting the role type in the database.
	Label = "role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRole holds the string denoting the role vertex property in the database.
	FieldRole = "role"

	// Table holds the table name of the role in the database.
	Table = "roles"
	// UsersTable is the table the holds the users relation/edge.
	UsersTable = "roles"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "users_id"
)

// Columns holds all SQL columns are role fields.
var Columns = []string{
	FieldID,
	FieldRole,
}

var (
	fields = schema.Role{}.Fields()

	// descRole is the schema descriptor for role field.
	descRole = fields[0].Descriptor()
	// DefaultRole holds the default value on creation for the role field.
	DefaultRole = descRole.Default.(string)
	// RoleValidator is a validator for the "role" field. It is called by the builders before save.
	RoleValidator = func() func(string) error {
		validators := descRole.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(role string) error {
			for _, fn := range fns {
				if err := fn(role); err != nil {
					return err
				}
			}
			return nil
		}
	}()
)
