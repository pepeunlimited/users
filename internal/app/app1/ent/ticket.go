// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Ticket is the model entity for the Ticket schema.
type Ticket struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
}

// FromRows scans the sql response data into Ticket.
func (t *Ticket) FromRows(rows *sql.Rows) error {
	var scant struct {
		ID        int
		Token     sql.NullString
		CreatedAt sql.NullTime
		ExpiresAt sql.NullTime
	}
	// the order here should be the same as in the `ticket.Columns`.
	if err := rows.Scan(
		&scant.ID,
		&scant.Token,
		&scant.CreatedAt,
		&scant.ExpiresAt,
	); err != nil {
		return err
	}
	t.ID = scant.ID
	t.Token = scant.Token.String
	t.CreatedAt = scant.CreatedAt.Time
	t.ExpiresAt = scant.ExpiresAt.Time
	return nil
}

// QueryUsers queries the users edge of the Ticket.
func (t *Ticket) QueryUsers() *UserQuery {
	return (&TicketClient{t.config}).QueryUsers(t)
}

// Update returns a builder for updating this Ticket.
// Note that, you need to call Ticket.Unwrap() before calling this method, if this Ticket
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticket) Update() *TicketUpdateOne {
	return (&TicketClient{t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Ticket) Unwrap() *Ticket {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticket is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticket) String() string {
	var builder strings.Builder
	builder.WriteString("Ticket(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", token=")
	builder.WriteString(t.Token)
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", expires_at=")
	builder.WriteString(t.ExpiresAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tickets is a parsable slice of Ticket.
type Tickets []*Ticket

// FromRows scans the sql response data into Tickets.
func (t *Tickets) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		scant := &Ticket{}
		if err := scant.FromRows(rows); err != nil {
			return err
		}
		*t = append(*t, scant)
	}
	return nil
}

func (t Tickets) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
