// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/users/internal/pkg/ent/role"
	"github.com/pepeunlimited/users/internal/pkg/ent/ticket"
	"github.com/pepeunlimited/users/internal/pkg/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	username           *string
	email              *string
	password           *string
	is_deleted         *bool
	is_banned          *bool
	is_locked          *bool
	last_modified      *time.Time
	profile_picture_id *int64
	tickets            map[int]struct{}
	roles              map[int]struct{}
}

// SetUsername sets the username field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.username = &s
	return uc
}

// SetEmail sets the email field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.email = &s
	return uc
}

// SetPassword sets the password field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.password = &s
	return uc
}

// SetIsDeleted sets the is_deleted field.
func (uc *UserCreate) SetIsDeleted(b bool) *UserCreate {
	uc.is_deleted = &b
	return uc
}

// SetNillableIsDeleted sets the is_deleted field if the given value is not nil.
func (uc *UserCreate) SetNillableIsDeleted(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsDeleted(*b)
	}
	return uc
}

// SetIsBanned sets the is_banned field.
func (uc *UserCreate) SetIsBanned(b bool) *UserCreate {
	uc.is_banned = &b
	return uc
}

// SetNillableIsBanned sets the is_banned field if the given value is not nil.
func (uc *UserCreate) SetNillableIsBanned(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsBanned(*b)
	}
	return uc
}

// SetIsLocked sets the is_locked field.
func (uc *UserCreate) SetIsLocked(b bool) *UserCreate {
	uc.is_locked = &b
	return uc
}

// SetNillableIsLocked sets the is_locked field if the given value is not nil.
func (uc *UserCreate) SetNillableIsLocked(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsLocked(*b)
	}
	return uc
}

// SetLastModified sets the last_modified field.
func (uc *UserCreate) SetLastModified(t time.Time) *UserCreate {
	uc.last_modified = &t
	return uc
}

// SetProfilePictureID sets the profile_picture_id field.
func (uc *UserCreate) SetProfilePictureID(i int64) *UserCreate {
	uc.profile_picture_id = &i
	return uc
}

// SetNillableProfilePictureID sets the profile_picture_id field if the given value is not nil.
func (uc *UserCreate) SetNillableProfilePictureID(i *int64) *UserCreate {
	if i != nil {
		uc.SetProfilePictureID(*i)
	}
	return uc
}

// AddTicketIDs adds the tickets edge to Ticket by ids.
func (uc *UserCreate) AddTicketIDs(ids ...int) *UserCreate {
	if uc.tickets == nil {
		uc.tickets = make(map[int]struct{})
	}
	for i := range ids {
		uc.tickets[ids[i]] = struct{}{}
	}
	return uc
}

// AddTickets adds the tickets edges to Ticket.
func (uc *UserCreate) AddTickets(t ...*Ticket) *UserCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddTicketIDs(ids...)
}

// AddRoleIDs adds the roles edge to Role by ids.
func (uc *UserCreate) AddRoleIDs(ids ...int) *UserCreate {
	if uc.roles == nil {
		uc.roles = make(map[int]struct{})
	}
	for i := range ids {
		uc.roles[ids[i]] = struct{}{}
	}
	return uc
}

// AddRoles adds the roles edges to Role.
func (uc *UserCreate) AddRoles(r ...*Role) *UserCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRoleIDs(ids...)
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if uc.username == nil {
		return nil, errors.New("ent: missing required field \"username\"")
	}
	if err := user.UsernameValidator(*uc.username); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"username\": %v", err)
	}
	if uc.email == nil {
		return nil, errors.New("ent: missing required field \"email\"")
	}
	if err := user.EmailValidator(*uc.email); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"email\": %v", err)
	}
	if uc.password == nil {
		return nil, errors.New("ent: missing required field \"password\"")
	}
	if err := user.PasswordValidator(*uc.password); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"password\": %v", err)
	}
	if uc.is_deleted == nil {
		v := user.DefaultIsDeleted
		uc.is_deleted = &v
	}
	if uc.is_banned == nil {
		v := user.DefaultIsBanned
		uc.is_banned = &v
	}
	if uc.is_locked == nil {
		v := user.DefaultIsLocked
		uc.is_locked = &v
	}
	if uc.last_modified == nil {
		return nil, errors.New("ent: missing required field \"last_modified\"")
	}
	return uc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	var (
		u     = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value := uc.username; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldUsername,
		})
		u.Username = *value
	}
	if value := uc.email; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldEmail,
		})
		u.Email = *value
	}
	if value := uc.password; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldPassword,
		})
		u.Password = *value
	}
	if value := uc.is_deleted; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: user.FieldIsDeleted,
		})
		u.IsDeleted = *value
	}
	if value := uc.is_banned; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: user.FieldIsBanned,
		})
		u.IsBanned = *value
	}
	if value := uc.is_locked; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: user.FieldIsLocked,
		})
		u.IsLocked = *value
	}
	if value := uc.last_modified; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldLastModified,
		})
		u.LastModified = *value
	}
	if value := uc.profile_picture_id; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: user.FieldProfilePictureID,
		})
		u.ProfilePictureID = value
	}
	if nodes := uc.tickets; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TicketsTable,
			Columns: []string{user.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticket.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.roles; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: []string{user.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	u.ID = int(id)
	return u, nil
}
