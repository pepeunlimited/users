// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	ticket2 "github.com/pepeunlimited/users/internal/app/app1/ent/ticket"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// TicketCreate is the builder for creating a Ticket entity.
type TicketCreate struct {
	config
	token      *string
	created_at *time.Time
	expires_at *time.Time
	users      map[int]struct{}
}

// SetToken sets the token field.
func (tc *TicketCreate) SetToken(s string) *TicketCreate {
	tc.token = &s
	return tc
}

// SetCreatedAt sets the created_at field.
func (tc *TicketCreate) SetCreatedAt(t time.Time) *TicketCreate {
	tc.created_at = &t
	return tc
}

// SetExpiresAt sets the expires_at field.
func (tc *TicketCreate) SetExpiresAt(t time.Time) *TicketCreate {
	tc.expires_at = &t
	return tc
}

// SetUsersID sets the users edge to User by id.
func (tc *TicketCreate) SetUsersID(id int) *TicketCreate {
	if tc.users == nil {
		tc.users = make(map[int]struct{})
	}
	tc.users[id] = struct{}{}
	return tc
}

// SetNillableUsersID sets the users edge to User by id if the given value is not nil.
func (tc *TicketCreate) SetNillableUsersID(id *int) *TicketCreate {
	if id != nil {
		tc = tc.SetUsersID(*id)
	}
	return tc
}

// SetUsers sets the users edge to User.
func (tc *TicketCreate) SetUsers(u *User) *TicketCreate {
	return tc.SetUsersID(u.ID)
}

// Save creates the Ticket in the database.
func (tc *TicketCreate) Save(ctx context.Context) (*Ticket, error) {
	if tc.token == nil {
		return nil, errors.New("ent: missing required field \"token\"")
	}
	if err := ticket2.TokenValidator(*tc.token); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"token\": %v", err)
	}
	if tc.created_at == nil {
		return nil, errors.New("ent: missing required field \"created_at\"")
	}
	if tc.expires_at == nil {
		return nil, errors.New("ent: missing required field \"expires_at\"")
	}
	if len(tc.users) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"users\"")
	}
	return tc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TicketCreate) SaveX(ctx context.Context) *Ticket {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TicketCreate) sqlSave(ctx context.Context) (*Ticket, error) {
	var (
		res     sql.Result
		builder = sql.Dialect(tc.driver.Dialect())
		t       = &Ticket{config: tc.config}
	)
	tx, err := tc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(ticket2.Table).Default()
	if value := tc.token; value != nil {
		insert.Set(ticket2.FieldToken, *value)
		t.Token = *value
	}
	if value := tc.created_at; value != nil {
		insert.Set(ticket2.FieldCreatedAt, *value)
		t.CreatedAt = *value
	}
	if value := tc.expires_at; value != nil {
		insert.Set(ticket2.FieldExpiresAt, *value)
		t.ExpiresAt = *value
	}

	id, err := insertLastID(ctx, tx, insert.Returning(ticket2.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	t.ID = int(id)
	if len(tc.users) > 0 {
		for eid := range tc.users {
			query, args := builder.Update(ticket2.UsersTable).
				Set(ticket2.UsersColumn, eid).
				Where(sql.EQ(ticket2.FieldID, id)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return t, nil
}
