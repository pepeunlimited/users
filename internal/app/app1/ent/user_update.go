// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/users/internal/app/app1/ent/predicate"
	"github.com/pepeunlimited/users/internal/app/app1/ent/role"
	"github.com/pepeunlimited/users/internal/app/app1/ent/ticket"
	"github.com/pepeunlimited/users/internal/app/app1/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	username       *string
	email          *string
	password       *string
	is_deleted     *bool
	is_banned      *bool
	is_locked      *bool
	last_modified  *time.Time
	tickets        map[int]struct{}
	roles          map[int]struct{}
	removedTickets map[int]struct{}
	removedRoles   map[int]struct{}
	predicates     []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetUsername sets the username field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.username = &s
	return uu
}

// SetEmail sets the email field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.email = &s
	return uu
}

// SetPassword sets the password field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.password = &s
	return uu
}

// SetIsDeleted sets the is_deleted field.
func (uu *UserUpdate) SetIsDeleted(b bool) *UserUpdate {
	uu.is_deleted = &b
	return uu
}

// SetNillableIsDeleted sets the is_deleted field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsDeleted(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsDeleted(*b)
	}
	return uu
}

// SetIsBanned sets the is_banned field.
func (uu *UserUpdate) SetIsBanned(b bool) *UserUpdate {
	uu.is_banned = &b
	return uu
}

// SetNillableIsBanned sets the is_banned field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsBanned(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsBanned(*b)
	}
	return uu
}

// SetIsLocked sets the is_locked field.
func (uu *UserUpdate) SetIsLocked(b bool) *UserUpdate {
	uu.is_locked = &b
	return uu
}

// SetNillableIsLocked sets the is_locked field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsLocked(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsLocked(*b)
	}
	return uu
}

// SetLastModified sets the last_modified field.
func (uu *UserUpdate) SetLastModified(t time.Time) *UserUpdate {
	uu.last_modified = &t
	return uu
}

// AddTicketIDs adds the tickets edge to Ticket by ids.
func (uu *UserUpdate) AddTicketIDs(ids ...int) *UserUpdate {
	if uu.tickets == nil {
		uu.tickets = make(map[int]struct{})
	}
	for i := range ids {
		uu.tickets[ids[i]] = struct{}{}
	}
	return uu
}

// AddTickets adds the tickets edges to Ticket.
func (uu *UserUpdate) AddTickets(t ...*Ticket) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTicketIDs(ids...)
}

// AddRoleIDs adds the roles edge to Role by ids.
func (uu *UserUpdate) AddRoleIDs(ids ...int) *UserUpdate {
	if uu.roles == nil {
		uu.roles = make(map[int]struct{})
	}
	for i := range ids {
		uu.roles[ids[i]] = struct{}{}
	}
	return uu
}

// AddRoles adds the roles edges to Role.
func (uu *UserUpdate) AddRoles(r ...*Role) *UserUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRoleIDs(ids...)
}

// RemoveTicketIDs removes the tickets edge to Ticket by ids.
func (uu *UserUpdate) RemoveTicketIDs(ids ...int) *UserUpdate {
	if uu.removedTickets == nil {
		uu.removedTickets = make(map[int]struct{})
	}
	for i := range ids {
		uu.removedTickets[ids[i]] = struct{}{}
	}
	return uu
}

// RemoveTickets removes tickets edges to Ticket.
func (uu *UserUpdate) RemoveTickets(t ...*Ticket) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTicketIDs(ids...)
}

// RemoveRoleIDs removes the roles edge to Role by ids.
func (uu *UserUpdate) RemoveRoleIDs(ids ...int) *UserUpdate {
	if uu.removedRoles == nil {
		uu.removedRoles = make(map[int]struct{})
	}
	for i := range ids {
		uu.removedRoles[ids[i]] = struct{}{}
	}
	return uu
}

// RemoveRoles removes roles edges to Role.
func (uu *UserUpdate) RemoveRoles(r ...*Role) *UserUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if uu.username != nil {
		if err := user.UsernameValidator(*uu.username); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"username\": %v", err)
		}
	}
	if uu.email != nil {
		if err := user.EmailValidator(*uu.email); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"email\": %v", err)
		}
	}
	if uu.password != nil {
		if err := user.PasswordValidator(*uu.password); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"password\": %v", err)
		}
	}
	return uu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(uu.driver.Dialect())
		selector = builder.Select(user.FieldID).From(builder.Table(user.Table))
	)
	for _, p := range uu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = uu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := uu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(user.Table)
	)
	updater = updater.Where(sql.InInts(user.FieldID, ids...))
	if value := uu.username; value != nil {
		updater.Set(user.FieldUsername, *value)
	}
	if value := uu.email; value != nil {
		updater.Set(user.FieldEmail, *value)
	}
	if value := uu.password; value != nil {
		updater.Set(user.FieldPassword, *value)
	}
	if value := uu.is_deleted; value != nil {
		updater.Set(user.FieldIsDeleted, *value)
	}
	if value := uu.is_banned; value != nil {
		updater.Set(user.FieldIsBanned, *value)
	}
	if value := uu.is_locked; value != nil {
		updater.Set(user.FieldIsLocked, *value)
	}
	if value := uu.last_modified; value != nil {
		updater.Set(user.FieldLastModified, *value)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(uu.removedTickets) > 0 {
		eids := make([]int, len(uu.removedTickets))
		for eid := range uu.removedTickets {
			eids = append(eids, eid)
		}
		query, args := builder.Update(user.TicketsTable).
			SetNull(user.TicketsColumn).
			Where(sql.InInts(user.TicketsColumn, ids...)).
			Where(sql.InInts(ticket.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(uu.tickets) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range uu.tickets {
				p.Or().EQ(ticket.FieldID, eid)
			}
			query, args := builder.Update(user.TicketsTable).
				Set(user.TicketsColumn, id).
				Where(sql.And(p, sql.IsNull(user.TicketsColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return 0, rollback(tx, err)
			}
			if int(affected) < len(uu.tickets) {
				return 0, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"tickets\" %v already connected to a different \"User\"", keys(uu.tickets))})
			}
		}
	}
	if len(uu.removedRoles) > 0 {
		eids := make([]int, len(uu.removedRoles))
		for eid := range uu.removedRoles {
			eids = append(eids, eid)
		}
		query, args := builder.Update(user.RolesTable).
			SetNull(user.RolesColumn).
			Where(sql.InInts(user.RolesColumn, ids...)).
			Where(sql.InInts(role.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(uu.roles) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range uu.roles {
				p.Or().EQ(role.FieldID, eid)
			}
			query, args := builder.Update(user.RolesTable).
				Set(user.RolesColumn, id).
				Where(sql.And(p, sql.IsNull(user.RolesColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return 0, rollback(tx, err)
			}
			if int(affected) < len(uu.roles) {
				return 0, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"roles\" %v already connected to a different \"User\"", keys(uu.roles))})
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	id             int
	username       *string
	email          *string
	password       *string
	is_deleted     *bool
	is_banned      *bool
	is_locked      *bool
	last_modified  *time.Time
	tickets        map[int]struct{}
	roles          map[int]struct{}
	removedTickets map[int]struct{}
	removedRoles   map[int]struct{}
}

// SetUsername sets the username field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.username = &s
	return uuo
}

// SetEmail sets the email field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.email = &s
	return uuo
}

// SetPassword sets the password field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.password = &s
	return uuo
}

// SetIsDeleted sets the is_deleted field.
func (uuo *UserUpdateOne) SetIsDeleted(b bool) *UserUpdateOne {
	uuo.is_deleted = &b
	return uuo
}

// SetNillableIsDeleted sets the is_deleted field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsDeleted(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsDeleted(*b)
	}
	return uuo
}

// SetIsBanned sets the is_banned field.
func (uuo *UserUpdateOne) SetIsBanned(b bool) *UserUpdateOne {
	uuo.is_banned = &b
	return uuo
}

// SetNillableIsBanned sets the is_banned field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsBanned(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsBanned(*b)
	}
	return uuo
}

// SetIsLocked sets the is_locked field.
func (uuo *UserUpdateOne) SetIsLocked(b bool) *UserUpdateOne {
	uuo.is_locked = &b
	return uuo
}

// SetNillableIsLocked sets the is_locked field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsLocked(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsLocked(*b)
	}
	return uuo
}

// SetLastModified sets the last_modified field.
func (uuo *UserUpdateOne) SetLastModified(t time.Time) *UserUpdateOne {
	uuo.last_modified = &t
	return uuo
}

// AddTicketIDs adds the tickets edge to Ticket by ids.
func (uuo *UserUpdateOne) AddTicketIDs(ids ...int) *UserUpdateOne {
	if uuo.tickets == nil {
		uuo.tickets = make(map[int]struct{})
	}
	for i := range ids {
		uuo.tickets[ids[i]] = struct{}{}
	}
	return uuo
}

// AddTickets adds the tickets edges to Ticket.
func (uuo *UserUpdateOne) AddTickets(t ...*Ticket) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTicketIDs(ids...)
}

// AddRoleIDs adds the roles edge to Role by ids.
func (uuo *UserUpdateOne) AddRoleIDs(ids ...int) *UserUpdateOne {
	if uuo.roles == nil {
		uuo.roles = make(map[int]struct{})
	}
	for i := range ids {
		uuo.roles[ids[i]] = struct{}{}
	}
	return uuo
}

// AddRoles adds the roles edges to Role.
func (uuo *UserUpdateOne) AddRoles(r ...*Role) *UserUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRoleIDs(ids...)
}

// RemoveTicketIDs removes the tickets edge to Ticket by ids.
func (uuo *UserUpdateOne) RemoveTicketIDs(ids ...int) *UserUpdateOne {
	if uuo.removedTickets == nil {
		uuo.removedTickets = make(map[int]struct{})
	}
	for i := range ids {
		uuo.removedTickets[ids[i]] = struct{}{}
	}
	return uuo
}

// RemoveTickets removes tickets edges to Ticket.
func (uuo *UserUpdateOne) RemoveTickets(t ...*Ticket) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTicketIDs(ids...)
}

// RemoveRoleIDs removes the roles edge to Role by ids.
func (uuo *UserUpdateOne) RemoveRoleIDs(ids ...int) *UserUpdateOne {
	if uuo.removedRoles == nil {
		uuo.removedRoles = make(map[int]struct{})
	}
	for i := range ids {
		uuo.removedRoles[ids[i]] = struct{}{}
	}
	return uuo
}

// RemoveRoles removes roles edges to Role.
func (uuo *UserUpdateOne) RemoveRoles(r ...*Role) *UserUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if uuo.username != nil {
		if err := user.UsernameValidator(*uuo.username); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"username\": %v", err)
		}
	}
	if uuo.email != nil {
		if err := user.EmailValidator(*uuo.email); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"email\": %v", err)
		}
	}
	if uuo.password != nil {
		if err := user.PasswordValidator(*uuo.password); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"password\": %v", err)
		}
	}
	return uuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	var (
		builder  = sql.Dialect(uuo.driver.Dialect())
		selector = builder.Select(user.Columns...).From(builder.Table(user.Table))
	)
	user.ID(uuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = uuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		u = &User{config: uuo.config}
		if err := u.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into User: %v", err)
		}
		id = u.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("User with id: %v", uuo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one User with the same id: %v", uuo.id)
	}

	tx, err := uuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(user.Table)
	)
	updater = updater.Where(sql.InInts(user.FieldID, ids...))
	if value := uuo.username; value != nil {
		updater.Set(user.FieldUsername, *value)
		u.Username = *value
	}
	if value := uuo.email; value != nil {
		updater.Set(user.FieldEmail, *value)
		u.Email = *value
	}
	if value := uuo.password; value != nil {
		updater.Set(user.FieldPassword, *value)
		u.Password = *value
	}
	if value := uuo.is_deleted; value != nil {
		updater.Set(user.FieldIsDeleted, *value)
		u.IsDeleted = *value
	}
	if value := uuo.is_banned; value != nil {
		updater.Set(user.FieldIsBanned, *value)
		u.IsBanned = *value
	}
	if value := uuo.is_locked; value != nil {
		updater.Set(user.FieldIsLocked, *value)
		u.IsLocked = *value
	}
	if value := uuo.last_modified; value != nil {
		updater.Set(user.FieldLastModified, *value)
		u.LastModified = *value
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(uuo.removedTickets) > 0 {
		eids := make([]int, len(uuo.removedTickets))
		for eid := range uuo.removedTickets {
			eids = append(eids, eid)
		}
		query, args := builder.Update(user.TicketsTable).
			SetNull(user.TicketsColumn).
			Where(sql.InInts(user.TicketsColumn, ids...)).
			Where(sql.InInts(ticket.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(uuo.tickets) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range uuo.tickets {
				p.Or().EQ(ticket.FieldID, eid)
			}
			query, args := builder.Update(user.TicketsTable).
				Set(user.TicketsColumn, id).
				Where(sql.And(p, sql.IsNull(user.TicketsColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return nil, rollback(tx, err)
			}
			if int(affected) < len(uuo.tickets) {
				return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"tickets\" %v already connected to a different \"User\"", keys(uuo.tickets))})
			}
		}
	}
	if len(uuo.removedRoles) > 0 {
		eids := make([]int, len(uuo.removedRoles))
		for eid := range uuo.removedRoles {
			eids = append(eids, eid)
		}
		query, args := builder.Update(user.RolesTable).
			SetNull(user.RolesColumn).
			Where(sql.InInts(user.RolesColumn, ids...)).
			Where(sql.InInts(role.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(uuo.roles) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range uuo.roles {
				p.Or().EQ(role.FieldID, eid)
			}
			query, args := builder.Update(user.RolesTable).
				Set(user.RolesColumn, id).
				Where(sql.And(p, sql.IsNull(user.RolesColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return nil, rollback(tx, err)
			}
			if int(affected) < len(uuo.roles) {
				return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"roles\" %v already connected to a different \"User\"", keys(uuo.roles))})
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return u, nil
}
