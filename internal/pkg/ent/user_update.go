// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"github.com/pepeunlimited/users/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/users/internal/pkg/ent/role"
	"github.com/pepeunlimited/users/internal/pkg/ent/ticket"
	"github.com/pepeunlimited/users/internal/pkg/ent/user"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	username                *string
	email                   *string
	password                *string
	is_deleted              *bool
	is_banned               *bool
	is_locked               *bool
	last_modified           *time.Time
	profile_picture_id      *int64
	addprofile_picture_id   *int64
	clearprofile_picture_id bool
	tickets                 map[int]struct{}
	roles                   map[int]struct{}
	removedTickets          map[int]struct{}
	removedRoles            map[int]struct{}
	predicates              []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetUsername sets the username field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.username = &s
	return uu
}

// SetEmail sets the email field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.email = &s
	return uu
}

// SetPassword sets the password field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.password = &s
	return uu
}

// SetIsDeleted sets the is_deleted field.
func (uu *UserUpdate) SetIsDeleted(b bool) *UserUpdate {
	uu.is_deleted = &b
	return uu
}

// SetNillableIsDeleted sets the is_deleted field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsDeleted(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsDeleted(*b)
	}
	return uu
}

// SetIsBanned sets the is_banned field.
func (uu *UserUpdate) SetIsBanned(b bool) *UserUpdate {
	uu.is_banned = &b
	return uu
}

// SetNillableIsBanned sets the is_banned field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsBanned(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsBanned(*b)
	}
	return uu
}

// SetIsLocked sets the is_locked field.
func (uu *UserUpdate) SetIsLocked(b bool) *UserUpdate {
	uu.is_locked = &b
	return uu
}

// SetNillableIsLocked sets the is_locked field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsLocked(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsLocked(*b)
	}
	return uu
}

// SetLastModified sets the last_modified field.
func (uu *UserUpdate) SetLastModified(t time.Time) *UserUpdate {
	uu.last_modified = &t
	return uu
}

// SetProfilePictureID sets the profile_picture_id field.
func (uu *UserUpdate) SetProfilePictureID(i int64) *UserUpdate {
	uu.profile_picture_id = &i
	uu.addprofile_picture_id = nil
	return uu
}

// SetNillableProfilePictureID sets the profile_picture_id field if the given value is not nil.
func (uu *UserUpdate) SetNillableProfilePictureID(i *int64) *UserUpdate {
	if i != nil {
		uu.SetProfilePictureID(*i)
	}
	return uu
}

// AddProfilePictureID adds i to profile_picture_id.
func (uu *UserUpdate) AddProfilePictureID(i int64) *UserUpdate {
	if uu.addprofile_picture_id == nil {
		uu.addprofile_picture_id = &i
	} else {
		*uu.addprofile_picture_id += i
	}
	return uu
}

// ClearProfilePictureID clears the value of profile_picture_id.
func (uu *UserUpdate) ClearProfilePictureID() *UserUpdate {
	uu.profile_picture_id = nil
	uu.clearprofile_picture_id = true
	return uu
}

// AddTicketIDs adds the tickets edge to Ticket by ids.
func (uu *UserUpdate) AddTicketIDs(ids ...int) *UserUpdate {
	if uu.tickets == nil {
		uu.tickets = make(map[int]struct{})
	}
	for i := range ids {
		uu.tickets[ids[i]] = struct{}{}
	}
	return uu
}

// AddTickets adds the tickets edges to Ticket.
func (uu *UserUpdate) AddTickets(t ...*Ticket) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTicketIDs(ids...)
}

// AddRoleIDs adds the roles edge to Role by ids.
func (uu *UserUpdate) AddRoleIDs(ids ...int) *UserUpdate {
	if uu.roles == nil {
		uu.roles = make(map[int]struct{})
	}
	for i := range ids {
		uu.roles[ids[i]] = struct{}{}
	}
	return uu
}

// AddRoles adds the roles edges to Role.
func (uu *UserUpdate) AddRoles(r ...*Role) *UserUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRoleIDs(ids...)
}

// RemoveTicketIDs removes the tickets edge to Ticket by ids.
func (uu *UserUpdate) RemoveTicketIDs(ids ...int) *UserUpdate {
	if uu.removedTickets == nil {
		uu.removedTickets = make(map[int]struct{})
	}
	for i := range ids {
		uu.removedTickets[ids[i]] = struct{}{}
	}
	return uu
}

// RemoveTickets removes tickets edges to Ticket.
func (uu *UserUpdate) RemoveTickets(t ...*Ticket) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTicketIDs(ids...)
}

// RemoveRoleIDs removes the roles edge to Role by ids.
func (uu *UserUpdate) RemoveRoleIDs(ids ...int) *UserUpdate {
	if uu.removedRoles == nil {
		uu.removedRoles = make(map[int]struct{})
	}
	for i := range ids {
		uu.removedRoles[ids[i]] = struct{}{}
	}
	return uu
}

// RemoveRoles removes roles edges to Role.
func (uu *UserUpdate) RemoveRoles(r ...*Role) *UserUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if uu.username != nil {
		if err := user.UsernameValidator(*uu.username); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"username\": %v", err)
		}
	}
	if uu.email != nil {
		if err := user.EmailValidator(*uu.email); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"email\": %v", err)
		}
	}
	if uu.password != nil {
		if err := user.PasswordValidator(*uu.password); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"password\": %v", err)
		}
	}
	return uu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := uu.username; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldUsername,
		})
	}
	if value := uu.email; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldEmail,
		})
	}
	if value := uu.password; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldPassword,
		})
	}
	if value := uu.is_deleted; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: user.FieldIsDeleted,
		})
	}
	if value := uu.is_banned; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: user.FieldIsBanned,
		})
	}
	if value := uu.is_locked; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: user.FieldIsLocked,
		})
	}
	if value := uu.last_modified; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldLastModified,
		})
	}
	if value := uu.profile_picture_id; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: user.FieldProfilePictureID,
		})
	}
	if value := uu.addprofile_picture_id; value != nil {
		spec.Fields.Add = append(spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: user.FieldProfilePictureID,
		})
	}
	if uu.clearprofile_picture_id {
		spec.Fields.Clear = append(spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldProfilePictureID,
		})
	}
	if nodes := uu.removedTickets; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TicketsTable,
			Columns: []string{user.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticket.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := uu.tickets; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TicketsTable,
			Columns: []string{user.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticket.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if nodes := uu.removedRoles; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: []string{user.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := uu.roles; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: []string{user.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	id                      int
	username                *string
	email                   *string
	password                *string
	is_deleted              *bool
	is_banned               *bool
	is_locked               *bool
	last_modified           *time.Time
	profile_picture_id      *int64
	addprofile_picture_id   *int64
	clearprofile_picture_id bool
	tickets                 map[int]struct{}
	roles                   map[int]struct{}
	removedTickets          map[int]struct{}
	removedRoles            map[int]struct{}
}

// SetUsername sets the username field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.username = &s
	return uuo
}

// SetEmail sets the email field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.email = &s
	return uuo
}

// SetPassword sets the password field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.password = &s
	return uuo
}

// SetIsDeleted sets the is_deleted field.
func (uuo *UserUpdateOne) SetIsDeleted(b bool) *UserUpdateOne {
	uuo.is_deleted = &b
	return uuo
}

// SetNillableIsDeleted sets the is_deleted field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsDeleted(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsDeleted(*b)
	}
	return uuo
}

// SetIsBanned sets the is_banned field.
func (uuo *UserUpdateOne) SetIsBanned(b bool) *UserUpdateOne {
	uuo.is_banned = &b
	return uuo
}

// SetNillableIsBanned sets the is_banned field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsBanned(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsBanned(*b)
	}
	return uuo
}

// SetIsLocked sets the is_locked field.
func (uuo *UserUpdateOne) SetIsLocked(b bool) *UserUpdateOne {
	uuo.is_locked = &b
	return uuo
}

// SetNillableIsLocked sets the is_locked field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsLocked(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsLocked(*b)
	}
	return uuo
}

// SetLastModified sets the last_modified field.
func (uuo *UserUpdateOne) SetLastModified(t time.Time) *UserUpdateOne {
	uuo.last_modified = &t
	return uuo
}

// SetProfilePictureID sets the profile_picture_id field.
func (uuo *UserUpdateOne) SetProfilePictureID(i int64) *UserUpdateOne {
	uuo.profile_picture_id = &i
	uuo.addprofile_picture_id = nil
	return uuo
}

// SetNillableProfilePictureID sets the profile_picture_id field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableProfilePictureID(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetProfilePictureID(*i)
	}
	return uuo
}

// AddProfilePictureID adds i to profile_picture_id.
func (uuo *UserUpdateOne) AddProfilePictureID(i int64) *UserUpdateOne {
	if uuo.addprofile_picture_id == nil {
		uuo.addprofile_picture_id = &i
	} else {
		*uuo.addprofile_picture_id += i
	}
	return uuo
}

// ClearProfilePictureID clears the value of profile_picture_id.
func (uuo *UserUpdateOne) ClearProfilePictureID() *UserUpdateOne {
	uuo.profile_picture_id = nil
	uuo.clearprofile_picture_id = true
	return uuo
}

// AddTicketIDs adds the tickets edge to Ticket by ids.
func (uuo *UserUpdateOne) AddTicketIDs(ids ...int) *UserUpdateOne {
	if uuo.tickets == nil {
		uuo.tickets = make(map[int]struct{})
	}
	for i := range ids {
		uuo.tickets[ids[i]] = struct{}{}
	}
	return uuo
}

// AddTickets adds the tickets edges to Ticket.
func (uuo *UserUpdateOne) AddTickets(t ...*Ticket) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTicketIDs(ids...)
}

// AddRoleIDs adds the roles edge to Role by ids.
func (uuo *UserUpdateOne) AddRoleIDs(ids ...int) *UserUpdateOne {
	if uuo.roles == nil {
		uuo.roles = make(map[int]struct{})
	}
	for i := range ids {
		uuo.roles[ids[i]] = struct{}{}
	}
	return uuo
}

// AddRoles adds the roles edges to Role.
func (uuo *UserUpdateOne) AddRoles(r ...*Role) *UserUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRoleIDs(ids...)
}

// RemoveTicketIDs removes the tickets edge to Ticket by ids.
func (uuo *UserUpdateOne) RemoveTicketIDs(ids ...int) *UserUpdateOne {
	if uuo.removedTickets == nil {
		uuo.removedTickets = make(map[int]struct{})
	}
	for i := range ids {
		uuo.removedTickets[ids[i]] = struct{}{}
	}
	return uuo
}

// RemoveTickets removes tickets edges to Ticket.
func (uuo *UserUpdateOne) RemoveTickets(t ...*Ticket) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTicketIDs(ids...)
}

// RemoveRoleIDs removes the roles edge to Role by ids.
func (uuo *UserUpdateOne) RemoveRoleIDs(ids ...int) *UserUpdateOne {
	if uuo.removedRoles == nil {
		uuo.removedRoles = make(map[int]struct{})
	}
	for i := range ids {
		uuo.removedRoles[ids[i]] = struct{}{}
	}
	return uuo
}

// RemoveRoles removes roles edges to Role.
func (uuo *UserUpdateOne) RemoveRoles(r ...*Role) *UserUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if uuo.username != nil {
		if err := user.UsernameValidator(*uuo.username); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"username\": %v", err)
		}
	}
	if uuo.email != nil {
		if err := user.EmailValidator(*uuo.email); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"email\": %v", err)
		}
	}
	if uuo.password != nil {
		if err := user.PasswordValidator(*uuo.password); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"password\": %v", err)
		}
	}
	return uuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  uuo.id,
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if value := uuo.username; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldUsername,
		})
	}
	if value := uuo.email; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldEmail,
		})
	}
	if value := uuo.password; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldPassword,
		})
	}
	if value := uuo.is_deleted; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: user.FieldIsDeleted,
		})
	}
	if value := uuo.is_banned; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: user.FieldIsBanned,
		})
	}
	if value := uuo.is_locked; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: user.FieldIsLocked,
		})
	}
	if value := uuo.last_modified; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldLastModified,
		})
	}
	if value := uuo.profile_picture_id; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: user.FieldProfilePictureID,
		})
	}
	if value := uuo.addprofile_picture_id; value != nil {
		spec.Fields.Add = append(spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: user.FieldProfilePictureID,
		})
	}
	if uuo.clearprofile_picture_id {
		spec.Fields.Clear = append(spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldProfilePictureID,
		})
	}
	if nodes := uuo.removedTickets; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TicketsTable,
			Columns: []string{user.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticket.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := uuo.tickets; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TicketsTable,
			Columns: []string{user.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticket.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if nodes := uuo.removedRoles; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: []string{user.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := uuo.roles; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: []string{user.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	u = &User{config: uuo.config}
	spec.Assign = u.assignValues
	spec.ScanValues = u.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return u, nil
}
