// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/users/internal/app/app1/ent/predicate"
	"github.com/pepeunlimited/users/internal/app/app1/ent/ticket"
	"github.com/pepeunlimited/users/internal/app/app1/ent/user"
)

// TicketUpdate is the builder for updating Ticket entities.
type TicketUpdate struct {
	config
	token        *string
	created_at   *time.Time
	expires_at   *time.Time
	users        map[int]struct{}
	clearedUsers bool
	predicates   []predicate.Ticket
}

// Where adds a new predicate for the builder.
func (tu *TicketUpdate) Where(ps ...predicate.Ticket) *TicketUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetToken sets the token field.
func (tu *TicketUpdate) SetToken(s string) *TicketUpdate {
	tu.token = &s
	return tu
}

// SetCreatedAt sets the created_at field.
func (tu *TicketUpdate) SetCreatedAt(t time.Time) *TicketUpdate {
	tu.created_at = &t
	return tu
}

// SetExpiresAt sets the expires_at field.
func (tu *TicketUpdate) SetExpiresAt(t time.Time) *TicketUpdate {
	tu.expires_at = &t
	return tu
}

// SetUsersID sets the users edge to User by id.
func (tu *TicketUpdate) SetUsersID(id int) *TicketUpdate {
	if tu.users == nil {
		tu.users = make(map[int]struct{})
	}
	tu.users[id] = struct{}{}
	return tu
}

// SetNillableUsersID sets the users edge to User by id if the given value is not nil.
func (tu *TicketUpdate) SetNillableUsersID(id *int) *TicketUpdate {
	if id != nil {
		tu = tu.SetUsersID(*id)
	}
	return tu
}

// SetUsers sets the users edge to User.
func (tu *TicketUpdate) SetUsers(u *User) *TicketUpdate {
	return tu.SetUsersID(u.ID)
}

// ClearUsers clears the users edge to User.
func (tu *TicketUpdate) ClearUsers() *TicketUpdate {
	tu.clearedUsers = true
	return tu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TicketUpdate) Save(ctx context.Context) (int, error) {
	if tu.token != nil {
		if err := ticket.TokenValidator(*tu.token); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"token\": %v", err)
		}
	}
	if len(tu.users) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"users\"")
	}
	return tu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TicketUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TicketUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TicketUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TicketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ticket.Table,
			Columns: ticket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ticket.FieldID,
			},
		},
	}
	if ps := tu.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := tu.token; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: ticket.FieldToken,
		})
	}
	if value := tu.created_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: ticket.FieldCreatedAt,
		})
	}
	if value := tu.expires_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: ticket.FieldExpiresAt,
		})
	}
	if tu.clearedUsers {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.UsersTable,
			Columns: []string{ticket.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := tu.users; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.UsersTable,
			Columns: []string{ticket.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TicketUpdateOne is the builder for updating a single Ticket entity.
type TicketUpdateOne struct {
	config
	id           int
	token        *string
	created_at   *time.Time
	expires_at   *time.Time
	users        map[int]struct{}
	clearedUsers bool
}

// SetToken sets the token field.
func (tuo *TicketUpdateOne) SetToken(s string) *TicketUpdateOne {
	tuo.token = &s
	return tuo
}

// SetCreatedAt sets the created_at field.
func (tuo *TicketUpdateOne) SetCreatedAt(t time.Time) *TicketUpdateOne {
	tuo.created_at = &t
	return tuo
}

// SetExpiresAt sets the expires_at field.
func (tuo *TicketUpdateOne) SetExpiresAt(t time.Time) *TicketUpdateOne {
	tuo.expires_at = &t
	return tuo
}

// SetUsersID sets the users edge to User by id.
func (tuo *TicketUpdateOne) SetUsersID(id int) *TicketUpdateOne {
	if tuo.users == nil {
		tuo.users = make(map[int]struct{})
	}
	tuo.users[id] = struct{}{}
	return tuo
}

// SetNillableUsersID sets the users edge to User by id if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableUsersID(id *int) *TicketUpdateOne {
	if id != nil {
		tuo = tuo.SetUsersID(*id)
	}
	return tuo
}

// SetUsers sets the users edge to User.
func (tuo *TicketUpdateOne) SetUsers(u *User) *TicketUpdateOne {
	return tuo.SetUsersID(u.ID)
}

// ClearUsers clears the users edge to User.
func (tuo *TicketUpdateOne) ClearUsers() *TicketUpdateOne {
	tuo.clearedUsers = true
	return tuo
}

// Save executes the query and returns the updated entity.
func (tuo *TicketUpdateOne) Save(ctx context.Context) (*Ticket, error) {
	if tuo.token != nil {
		if err := ticket.TokenValidator(*tuo.token); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"token\": %v", err)
		}
	}
	if len(tuo.users) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"users\"")
	}
	return tuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TicketUpdateOne) SaveX(ctx context.Context) *Ticket {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TicketUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TicketUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TicketUpdateOne) sqlSave(ctx context.Context) (t *Ticket, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ticket.Table,
			Columns: ticket.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  tuo.id,
				Type:   field.TypeInt,
				Column: ticket.FieldID,
			},
		},
	}
	if value := tuo.token; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: ticket.FieldToken,
		})
	}
	if value := tuo.created_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: ticket.FieldCreatedAt,
		})
	}
	if value := tuo.expires_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: ticket.FieldExpiresAt,
		})
	}
	if tuo.clearedUsers {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.UsersTable,
			Columns: []string{ticket.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := tuo.users; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.UsersTable,
			Columns: []string{ticket.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	t = &Ticket{config: tuo.config}
	spec.Assign = t.assignValues
	spec.ScanValues = t.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
